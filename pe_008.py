"""
Project Euler Problem #8
Give the 13 consecutive integers that have the largest product
in the given 1000 digit number
"""
from functools import reduce

BIG_NUMBER = "73167176531330624919225119674426574742355349194934"\
             "96983520312774506326239578318016984801869478851843"\
             "85861560789112949495459501737958331952853208805511"\
             "12540698747158523863050715693290963295227443043557"\
             "66896648950445244523161731856403098711121722383113"\
             "62229893423380308135336276614282806444486645238749"\
             "30358907296290491560440772390713810515859307960866"\
             "70172427121883998797908792274921901699720888093776"\
             "65727333001053367881220235421809751254540594752243"\
             "52584907711670556013604839586446706324415722155397"\
             "53697817977846174064955149290862569321978468622482"\
             "83972241375657056057490261407972968652414535100474"\
             "82166370484403199890008895243450658541227588666881"\
             "16427171479924442928230863465674813919123162824586"\
             "17866458359124566529476545682848912883142607690042"\
             "24219022671055626321111109370544217506941658960408"\
             "07198403850962455444362981230987879927244284909188"\
             "84580156166097919133875499200524063689912560717606"\
             "05886116467109405077541002256983155200055935729725"\
             "71636269561882670428252483600823257530420752963450"


def consec_sub_string(string, n):
    """Takes in a string and returns a list containing all
    consecutive substrings of len n"""
    return [[int(j) for j in string[i:i+n]] for i in range(len(string) - n)]


def largest_product(string, n):
    sub_strings = consec_sub_string(string, n)
    largest_prod = 0
    largest_prod_index = 0

    for i in enumerate(sub_strings):
        prod = reduce(lambda x, y: x * y, i[1])
        if prod > largest_prod:
            largest_prod = prod
            largest_prod_index = i[0]

    return (largest_prod, sub_strings[largest_prod_index])


if __name__ == "__main__":
    print("Product: %d" % largest_product(BIG_NUMBER, 13)[0])
